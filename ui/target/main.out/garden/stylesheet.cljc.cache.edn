;; Analyzed by ClojureScript 1.7.107
{:use-macros nil, :excludes #{}, :name garden.stylesheet, :imports nil, :requires {util garden.util, garden.util garden.util, color garden.color, garden.color garden.color, t garden.types, garden.types garden.types}, :uses nil, :defs {rule {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([selector & more])), :doc "Create a rule function for the given selector. The `selector`\n  argument must be valid selector (ie. a keyword, string, or symbol).\n  Additional arguments may consist of extra selectors or\n  declarations.\n\n  The returned function accepts any number of arguments which represent\n  the rule's children.\n\n  Ex.\n      (let [text-field (rule \"[type=\"text\"])]\n       (text-field {:border [\"1px\" :solid \"black\"]}))\n      ;; => [\"[type=\"text\"] {:boder [\"1px\" :solid \"black\"]}]", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(selector more)], :arglists ([selector & more]), :arglists-meta (nil)}}, :name garden.stylesheet/rule, :variadic true, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(selector more)], :arglists ([selector & more]), :arglists-meta (nil)}, :method-params [(selector more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists ([selector & more]), :doc "Create a rule function for the given selector. The `selector`\n  argument must be valid selector (ie. a keyword, string, or symbol).\n  Additional arguments may consist of extra selectors or\n  declarations.\n\n  The returned function accepts any number of arguments which represent\n  the rule's children.\n\n  Ex.\n      (let [text-field (rule \"[type=\"text\"])]\n       (text-field {:border [\"1px\" :solid \"black\"]}))\n      ;; => [\"[type=\"text\"] {:boder [\"1px\" :solid \"black\"]}]"}, cssfn {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 34, :column 7, :end-line 34, :end-column 12, :arglists (quote ([fn-name]))}, :name garden.stylesheet/cssfn, :variadic false, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 12, :method-params ([fn-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-name]))}, at-rule {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 40, :column 8, :end-line 40, :end-column 15, :private true, :arglists (quote ([identifier value]))}, :private true, :name garden.stylesheet/at-rule, :variadic false, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 15, :method-params ([identifier value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([identifier value]))}, at-font-face {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([& font-properties])), :doc "Create a CSS @font-face rule.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(font-properties)], :arglists ([& font-properties]), :arglists-meta (nil)}}, :name garden.stylesheet/at-font-face, :variadic true, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(font-properties)], :arglists ([& font-properties]), :arglists-meta (nil)}, :method-params [(font-properties)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& font-properties]), :doc "Create a CSS @font-face rule."}, at-import {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([url] [url & media-queries])), :doc "Create a CSS @import rule.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([url]), :arglists ([url] [url & media-queries]), :arglists-meta (nil nil)}}, :name garden.stylesheet/at-import, :variadic true, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([url]), :arglists ([url] [url & media-queries]), :arglists-meta (nil nil)}, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists ([url] [url & media-queries]), :doc "Create a CSS @import rule."}, at-media {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([media-queries & rules])), :doc "Create a CSS @media rule.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(media-queries rules)], :arglists ([media-queries & rules]), :arglists-meta (nil)}}, :name garden.stylesheet/at-media, :variadic true, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(media-queries rules)], :arglists ([media-queries & rules]), :arglists-meta (nil)}, :method-params [(media-queries rules)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists ([media-queries & rules]), :doc "Create a CSS @media rule."}, at-keyframes {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([identifier & frames])), :doc "Create a CSS @keyframes rule.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(identifier frames)], :arglists ([identifier & frames]), :arglists-meta (nil)}}, :name garden.stylesheet/at-keyframes, :variadic true, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(identifier frames)], :arglists ([identifier & frames]), :arglists-meta (nil)}, :method-params [(identifier frames)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists ([identifier & frames]), :doc "Create a CSS @keyframes rule."}, rgb {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 71, :column 7, :end-line 71, :end-column 10, :arglists (quote ([r g b])), :doc "Create a color from RGB values."}, :name garden.stylesheet/rgb, :variadic false, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 10, :method-params ([r g b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([r g b])), :doc "Create a color from RGB values."}, hsl {:protocol-inline nil, :meta {:file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :line 76, :column 7, :end-line 76, :end-column 10, :arglists (quote ([h s l])), :doc "Create a color from HSL values."}, :name garden.stylesheet/hsl, :variadic false, :file "/Users/julien/.boot/cache/tmp/Users/julien/Documents/energumene/ui/139o/-yc3gxx/main.out/garden/stylesheet.cljc", :end-column 10, :method-params ([h s l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([h s l])), :doc "Create a color from HSL values."}}, :require-macros {color garden.color, garden.color garden.color}, :cljs.analyzer/constants {:seen #{:frames :rules :media-queries :keyframes :url :identifier :import :media}, :order [:import :url :media-queries :media :rules :keyframes :identifier :frames]}, :doc "Utility functions for CSS properties, directives and functions."}